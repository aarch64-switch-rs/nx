searchState.loadedDescShard("line_drawing", 0, "A collection of line-drawing algorithms for use in …\nAn implementation of Bresenham’s line algorithm.\nAn 3-D implementation of bresenham, sourced from this site.\nAn implementation of Bresenham’s circle algorithm.\nAll the floating-point primitives.\nAn implementation of the mid-point line drawing algorithm.\nA point in 2D space.\nAll the signed integer primitives.\nLike <code>WalkGrid</code> but takes diagonal steps if the line passes …\nAn point in 3D space.\nWhether the center or corner of a voxel is aligned with …\nWalk along a grid, taking only orthogonal steps.\nWalk between two voxels, taking orthogonal steps and …\nAn implementation of Xiaolin Wu’s line algorithm.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>WalkVoxels</code> iterator, with the origin of the …\nA simple octant struct for transforming line points.\nRound a voxel’s position based on the origin.\nAn iterator that returns <code>(start, end)</code> tuples from the walk.\nA simple octant struct for transforming line points.\nReturns the argument unchanged.\nConvert a point from its position in the octant.\nCalls <code>U::from(self)</code>.\nGet the relevant octant from a start and end point.\nConvert a point to its position in the octant.\nAn iterator that returns <code>(start, end)</code> tuples from the walk.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")