searchState.loadedDescShard("linked_list_allocator", 0, "A fixed size heap backed by a linked list of free memory …\nAlign downwards. Returns the greatest x with alignment …\nAlign upwards. Returns the smallest x with alignment <code>align</code> …\nAllocates a chunk of the given size with the given …\nReturns the bottom address of the heap.\nFrees the given allocation. <code>ptr</code> must be a pointer returned …\nCreates an empty heap. All allocate calls will return <code>None</code>.\nExtends the size of the heap by creating a new hole at the …\nReturns the size of the free part of the heap\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new heap from a slice of raw memory.\nInitializes an empty heap\nInitialize an empty heap with provided memory.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new heap with the given <code>bottom</code> and <code>size</code>.\nCreates a new heap with the given <code>bottom</code> and <code>size</code>.\nReturns the size of the heap.\nReturn the top address of the heap.\nReturns the size of the used part of the heap\nA sorted list of holes. It uses the the holes itself to …\nAligns the given layout for use with <code>HoleList</code>.\nSearches the list for a big enough hole.\nFrees the allocation given by <code>ptr</code> and <code>layout</code>.\nCreates an empty <code>HoleList</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the minimal allocation size. Smaller allocations …\nCreates a <code>HoleList</code> that contains the given hole.")