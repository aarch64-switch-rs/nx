(function() {
    var type_impls = Object.fromEntries([["spinning_top",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#676\">Source</a><a href=\"#impl-Debug-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; Debug for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: Debug + 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#677\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#651\">Source</a><a href=\"#impl-Deref-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; Deref for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#652\">Source</a><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#654\">Source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deref</a>(&amp;self) -&gt; &amp;T</h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#659\">Source</a><a href=\"#impl-DerefMut-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; DerefMut for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#661\">Source</a><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut T</h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#682\">Source</a><a href=\"#impl-Display-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; Display for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: Display + 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#683\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result&lt;(), Error&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Display","spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#666\">Source</a><a href=\"#impl-Drop-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; Drop for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#668\">Source</a><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a>Read more</a></div></details></div></details>","Drop","spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#511\">Source</a><a href=\"#impl-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + 'a,\n    T: 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mutex\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#513\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.mutex\" class=\"fn\">mutex</a>(s: &amp;<a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;) -&gt; &amp;'a <a class=\"struct\" href=\"lock_api/mutex/struct.Mutex.html\" title=\"struct lock_api::mutex::Mutex\">Mutex</a>&lt;R, T&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the original <code>Mutex</code> object.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#526-528\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.map\" class=\"fn\">map</a>&lt;U, F&gt;(s: <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;, f: F) -&gt; <a class=\"struct\" href=\"lock_api/mutex/struct.MappedMutexGuard.html\" title=\"struct lock_api::mutex::MappedMutexGuard\">MappedMutexGuard</a>&lt;'a, R, U&gt;<div class=\"where\">where\n    F: FnOnce(&amp;mut T) -&gt; &amp;mut U,\n    U: ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Makes a new <code>MappedMutexGuard</code> for a component of the locked data.</p>\n<p>This operation cannot fail as the <code>MutexGuard</code> passed\nin already locked the mutex.</p>\n<p>This is an associated function that needs to be\nused as <code>MutexGuard::map(...)</code>. A method would interfere with methods of\nthe same name on the contents of the locked data.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_map\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#550-552\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.try_map\" class=\"fn\">try_map</a>&lt;U, F&gt;(\n    s: <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;,\n    f: F,\n) -&gt; Result&lt;<a class=\"struct\" href=\"lock_api/mutex/struct.MappedMutexGuard.html\" title=\"struct lock_api::mutex::MappedMutexGuard\">MappedMutexGuard</a>&lt;'a, R, U&gt;, <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;&gt;<div class=\"where\">where\n    F: FnOnce(&amp;mut T) -&gt; Option&lt;&amp;mut U&gt;,\n    U: ?Sized,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to make a new <code>MappedMutexGuard</code> for a component of the\nlocked data. The original guard is returned if the closure returns <code>None</code>.</p>\n<p>This operation cannot fail as the <code>MutexGuard</code> passed\nin already locked the mutex.</p>\n<p>This is an associated function that needs to be\nused as <code>MutexGuard::try_map(...)</code>. A method would interfere with methods of\nthe same name on the contents of the locked data.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlocked\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#572-574\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.unlocked\" class=\"fn\">unlocked</a>&lt;F, U&gt;(s: &amp;mut <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;, f: F) -&gt; U<div class=\"where\">where\n    F: FnOnce() -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Temporarily unlocks the mutex to execute the given function.</p>\n<p>This is safe because <code>&amp;mut</code> guarantees that there exist no other\nreferences to the data protected by the mutex.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#589\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.leak\" class=\"fn\">leak</a>(s: <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;) -&gt; &amp;'a mut T</h4></section></summary><div class=\"docblock\"><p>Leaks the mutex guard and returns a mutable reference to the data\nprotected by the mutex.</p>\n<p>This will leave the <code>Mutex</code> in a locked state.</p>\n</div></details></div></details>",0,"spinning_top::spinlock::SpinlockGuard"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#596\">Source</a><a href=\"#impl-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutexFair.html\" title=\"trait lock_api::mutex::RawMutexFair\">RawMutexFair</a> + 'a,\n    T: 'a + ?Sized,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlock_fair\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#610\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.unlock_fair\" class=\"fn\">unlock_fair</a>(s: <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Unlocks the mutex using a fair unlock protocol.</p>\n<p>By default, mutexes are unfair and allow the current thread to re-lock\nthe mutex before another has the chance to acquire the lock, even if\nthat thread has been blocked on the mutex for a long time. This is the\ndefault because it allows much higher throughput as it avoids forcing a\ncontext switch on every mutex unlock. This can result in one thread\nacquiring a mutex many more times than other threads.</p>\n<p>However in some cases it can be beneficial to ensure fairness by forcing\nthe lock to pass on to a waiting thread if there is one. This is done by\nusing this method instead of dropping the <code>MutexGuard</code> normally.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unlocked_fair\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#625-627\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.unlocked_fair\" class=\"fn\">unlocked_fair</a>&lt;F, U&gt;(s: &amp;mut <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;, f: F) -&gt; U<div class=\"where\">where\n    F: FnOnce() -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Temporarily unlocks the mutex to execute the given function.</p>\n<p>The mutex is unlocked using a fair unlock protocol.</p>\n<p>This is safe because <code>&amp;mut</code> guarantees that there exist no other\nreferences to the data protected by the mutex.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bump\" class=\"method\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#643\">Source</a><h4 class=\"code-header\">pub fn <a href=\"lock_api/mutex/struct.MutexGuard.html#tymethod.bump\" class=\"fn\">bump</a>(s: &amp;mut <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;)</h4></section></summary><div class=\"docblock\"><p>Temporarily yields the mutex to a waiting thread if there is one.</p>\n<p>This method is functionally equivalent to calling <code>unlock_fair</code> followed\nby <code>lock</code>, however it can be much more efficient in the case where there\nare no waiting threads.</p>\n</div></details></div></details>",0,"spinning_top::spinlock::SpinlockGuard"],["<section id=\"impl-Sync-for-MutexGuard%3C'a,+R,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/lock_api/mutex.rs.html#509\">Source</a><a href=\"#impl-Sync-for-MutexGuard%3C'a,+R,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, R, T&gt; Sync for <a class=\"struct\" href=\"lock_api/mutex/struct.MutexGuard.html\" title=\"struct lock_api::mutex::MutexGuard\">MutexGuard</a>&lt;'a, R, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"lock_api/mutex/trait.RawMutex.html\" title=\"trait lock_api::mutex::RawMutex\">RawMutex</a> + Sync + 'a,\n    T: Sync + 'a + ?Sized,</div></h3></section>","Sync","spinning_top::spinlock::SpinlockGuard"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[16607]}