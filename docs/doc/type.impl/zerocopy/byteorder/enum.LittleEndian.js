(function() {
    var type_impls = Object.fromEntries([["zerocopy",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Clone-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Clone for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a>Read more</a></div></details></div></details>","Clone","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Debug-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Debug for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, f: &amp;mut Formatter&lt;'_&gt;) -&gt; Result</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Debug","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#132-137\">Source</a><a href=\"#impl-Display-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Display for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#134-136\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">fmt</a>(&amp;self, _: &amp;mut Formatter&lt;'_&gt;) -&gt; Result</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a>Read more</a></div></details></div></details>","Display","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Hash-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Hash for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash</a>&lt;__H: Hasher&gt;(&amp;self, state: &amp;mut __H)</h4></section></summary><div class='docblock'>Feeds this value into the given [<code>Hasher</code>]. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.3.0\">1.3.0</span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: &amp;mut H)<div class=\"where\">where\n    H: Hasher,\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given [<code>Hasher</code>]. <a>Read more</a></div></details></div></details>","Hash","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Ord-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Ord for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a>) -&gt; Ordering</h4></section></summary><div class='docblock'>This method returns an [<code>Ordering</code>] between <code>self</code> and <code>other</code>. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.21.0\">1.21.0</span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.50.0\">1.50.0</span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: Sized,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a>Read more</a></div></details></div></details>","Ord","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-PartialEq-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PartialEq for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a>) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ne</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-PartialOrd-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl PartialOrd for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a>) -&gt; Option&lt;Ordering&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">lt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">le</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">gt</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"since rightside\" title=\"Stable since Rust version 1.0.0\">1.0.0</span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">ge</a>(&amp;self, other: &amp;Rhs) -&gt; bool</h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a>Read more</a></div></details></div></details>","PartialOrd","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<section id=\"impl-ByteOrder-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#128-130\">Source</a><a href=\"#impl-ByteOrder-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"zerocopy/byteorder/trait.ByteOrder.html\" title=\"trait zerocopy::byteorder::ByteOrder\">ByteOrder</a> for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section>","ByteOrder","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<section id=\"impl-Copy-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Copy-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Copy for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section>","Copy","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<section id=\"impl-Eq-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-Eq-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl Eq for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section>","Eq","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"],["<section id=\"impl-StructuralPartialEq-for-LittleEndian\" class=\"impl\"><a class=\"src rightside\" href=\"src/zerocopy/byteorder.rs.html#125\">Source</a><a href=\"#impl-StructuralPartialEq-for-LittleEndian\" class=\"anchor\">§</a><h3 class=\"code-header\">impl StructuralPartialEq for <a class=\"enum\" href=\"zerocopy/byteorder/enum.LittleEndian.html\" title=\"enum zerocopy::byteorder::LittleEndian\">LittleEndian</a></h3></section>","StructuralPartialEq","zerocopy::byteorder::NativeEndian","zerocopy::byteorder::LE"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[15300]}